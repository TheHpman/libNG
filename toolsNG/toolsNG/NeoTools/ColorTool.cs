using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;


// I have no idea what I am doing  (╯‵□′)╯︵┻━┻

namespace NeoTools
{

    public static class ColorTool
    {
        public static ushort[,,] colors = null;
        public static string errMsg = null;

        //resistor values computed from MAME
        //private static double[] _values = {
        //     0.0000000000000000, 0.0000000000000000, 7.6868626613063098, 7.7986725921356159, 13.6267110582412330, 13.8249195716471380, 21.3135737195475410, 21.6235921637827530,
        //     29.9787642921561930, 30.4148230211259190, 37.6656269534625000, 38.2134956132615360, 43.6054753503974270, 44.2397425927730550, 51.2923380117037340, 52.0384151849086720,
        //     63.7846048431222390, 64.7123893723533140, 71.4714675044285460, 72.5110619644889310, 77.4113159013634660, 78.5373089440004580, 85.0981785626697730, 86.3359815361360750,
        //     93.7633691352784240, 95.1272123934792260, 101.4502317965847300, 102.9258849856148400, 107.3900801935196500, 108.9521319651263700, 115.0769428548259600, 116.7508045572619900,
        //     136.2671103126034200, 138.2491954427379700, 143.9539729739097400, 146.0478680348735700, 149.8938213708446500, 152.0741150143851100, 157.5806840321509700, 159.8727876065207200,
        //     166.2458746047596200, 168.6640184638639000, 173.9327372660659400, 176.4626910559995000, 179.8725856630008500, 182.4889380355110400, 187.5594483243071700, 190.2876106276466400,
        //     200.0517151557256700, 202.9615848150912700, 207.7385778170320000, 210.7602574072268700, 213.6784262139669000, 216.7865043867384100, 221.3652888752732200, 224.5851769788740200,
        //     230.0304794478818700, 233.3764078362172000, 237.7173421091881900, 241.1750804283528000, 243.6571905061231000, 247.2013274078643400, 251.3440531674294200, 254.9999999999999400 };
        //
        // private static byte[] _colorCode = {
        //         0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0,     /* 00-15 */
        //         0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0,     /* 16-31 */
        //         0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0,     /* 32-47 */
        //         0, 0, 0, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     /* 48-63 */
        //         16, 17, 0, 0, 0, 0, 0, 18, 0, 19, 0, 0, 0, 20, 0, 21,     /* 64-79 */
        //         0, 0, 0, 0, 0, 22, 23, 0, 0, 0, 0, 0, 0, 0, 24, 25,     /* 80-95 */
        //         0, 0, 0, 0, 0, 26, 0, 27, 0, 0, 0, 28, 0, 29, 0, 0,     /* 96-111 */
        //         0, 0, 0, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     /* 112-127 */
        //         0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 33, 0, 0, 0, 0, 0,     /* 128-143 */
        //         34, 0, 35, 0, 0, 0, 36, 0, 37, 0, 0, 0, 0, 0, 38, 0,     /* 144-159 */
        //         39, 0, 0, 0, 0, 0, 40, 0, 0, 41, 0, 0, 0, 0, 42, 0,     /* 160-175 */
        //         43, 0, 0, 0, 44, 0, 45, 0, 0, 0, 0, 0, 46, 0, 47, 0,     /* 176-191 */
        //         0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 49, 0, 0, 0, 0,     /* 192-207 */
        //         50, 0, 0, 51, 0, 0, 52, 0, 0, 53, 0, 0, 0, 54, 0, 0,     /* 208-223 */
        //         0, 55, 0, 0, 0, 0, 56, 0, 0, 57, 0, 0, 0, 0, 58, 0,     /* 224-239 */
        //         0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 63      /* 240-255 */
        // };

        private static double[] _values_noDB = {
            0.0000000000000000, 7.7986725921356159, 13.8249195716471380, 21.6235921637827530, 30.4148230211259190, 38.2134956132615360, 44.2397425927730550, 52.0384151849086720,
            64.7123893723533140, 72.5110619644889310, 78.5373089440004580, 86.3359815361360750, 95.1272123934792260, 102.9258849856148400, 108.9521319651263700, 116.7508045572619900,
            138.2491954427379700, 146.0478680348735700, 152.0741150143851100, 159.8727876065207200, 168.6640184638639000, 176.4626910559995000, 182.4889380355110400, 190.2876106276466400,
            202.9615848150912700, 210.7602574072268700, 216.7865043867384100, 224.5851769788740200, 233.3764078362172000, 241.1750804283528000, 247.2013274078643400, 254.9999999999999400 };

        private static double[] _values_DB = {
            0.0000000000000000, 7.6868626613063098, 13.6267110582412330, 21.3135737195475410, 29.9787642921561930, 37.6656269534625000, 43.6054753503974270, 51.2923380117037340,
            63.7846048431222390, 71.4714675044285460, 77.4113159013634660, 85.0981785626697730, 93.7633691352784240, 101.4502317965847300, 107.3900801935196500, 115.0769428548259600,
            136.2671103126034200, 143.9539729739097400, 149.8938213708446500, 157.5806840321509700, 166.2458746047596200, 173.9327372660659400, 179.8725856630008500, 187.5594483243071700,
            200.0517151557256700, 207.7385778170320000, 213.6784262139669000, 221.3652888752732200, 230.0304794478818700, 237.7173421091881900, 243.6571905061231000, 251.3440531674294200 };

        private static byte[] _index_noDB = {
            0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
            2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
            4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6,
            6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,
            8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10,
            10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12,
            12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14,
            14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
            16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17,
            17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19,
            19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
            21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23,
            23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
            25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27,
            27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29,
            29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31 };

        private static byte[] _index_DB = {
            0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
            2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
            4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
            7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8,
            8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10,
            10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12,
            12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14,
            15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17,
            17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19,
            19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
            21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23,
            23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25,
            25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27,
            27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29,
            29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31 };

        public static bool loadColorFile(string fName)
        {
            int x = 0;
            byte[] buffer = null;

            try
            {
                buffer = File.ReadAllBytes(fName);
            }
            catch (Exception e)
            {
                errMsg = e.Message;
                return false;
            }

            if (buffer.Length != 0x2000000) //32MB
            {
                errMsg = "Incorrect color file size.";
                return false;
            }

            colors = new ushort[256, 256, 256];
            for (int r = 0; r < 256; r++)
                for (int g = 0; g < 256; g++)
                    for (int b = 0; b < 256; x += 2, b++)
                        colors[r, g, b] = (ushort)((buffer[x] << 8) | buffer[x + 1]);

            return true;
        }

        public static ushort NeoColor(byte R, byte G, byte B)
        {
            if (colors != null) return (colors[R, G, B]);

            ushort redMask, greenMask, blueMask, darkBit;
            byte r, g, b;
            byte R_indexnoDB = _index_noDB[R];
            byte R_indexDB = _index_DB[R];
            byte G_indexnoDB = _index_noDB[G];
            byte G_indexDB = _index_DB[G];
            byte B_indexnoDB = _index_noDB[B];
            byte B_indexDB = _index_DB[B];

            double delta_noDB = Math.Abs(_values_noDB[R_indexnoDB] - R) + Math.Abs(_values_noDB[G_indexnoDB] - G) + Math.Abs(_values_noDB[B_indexnoDB] - B);
            double delta_DB = Math.Abs(_values_DB[R_indexDB] - R) + Math.Abs(_values_DB[G_indexDB] - G) + Math.Abs(_values_DB[B_indexDB] - B);

            if (delta_noDB < delta_DB) //pick noDB values
            {
                r = R_indexnoDB;
                g = G_indexnoDB;
                b = B_indexnoDB;
                darkBit = 0x0000;
            }
            else //pick DB values
            {
                r = R_indexDB;
                g = G_indexDB;
                b = B_indexDB;
                darkBit = 0x8000;
            }

            if ((r & 0x01) != 0) redMask = (ushort)(((r & 0xfe) << 7) | 0x4000);
            else redMask = (ushort)(r << 7);
            if ((g & 0x01) != 0) greenMask = (ushort)(((g & 0xfe) << 3) | 0x2000);
            else greenMask = (ushort)(g << 3);
            if ((b & 0x01) != 0) blueMask = (ushort)(((b & 0xfe) >> 1) | 0x1000);
            else blueMask = (ushort)(b >> 1);

            return ((ushort)(redMask | greenMask | blueMask | darkBit));
        }

        public static ushort NeoColor_linear(byte R, byte G, byte B)
        {
            byte r, g, b;
            ushort darkBit = 0;
            ushort redMask, greenMask, blueMask;

            r = (byte)(R >> 2);     //down to 6 bits
            g = (byte)(G >> 2);
            b = (byte)(B >> 2);

            if ((r & 0x01) != 0) darkBit++;
            if ((g & 0x01) != 0) darkBit++;
            if ((b & 0x01) != 0) darkBit++;
            if (darkBit >= 2) darkBit = 0x0000;
            else darkBit = 0x8000;

            r >>= 1;        //down to 5 bits
            g >>= 1;
            b >>= 1;

            if ((r & 0x01) != 0) redMask = (ushort)(((r & 0xfe) << 7) | 0x4000);
            else redMask = (ushort)(r << 7);
            if ((g & 0x01) != 0) greenMask = (ushort)(((g & 0xfe) << 3) | 0x2000);
            else greenMask = (ushort)(g << 3);
            if ((b & 0x01) != 0) blueMask = (ushort)(((b & 0xfe) >> 1) | 0x1000);
            else blueMask = (ushort)(b >> 1);

            return ((ushort)(redMask | greenMask | blueMask | darkBit));
        }
    }
}
